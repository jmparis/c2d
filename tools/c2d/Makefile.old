V		?=	0
E		?=	P

ifeq	($(findstring P,$(E)),P)
ENV		=	Production
endif

ifeq	($(findstring R,$(E)),R)
ENV		=	Release
endif

ifeq	($(findstring D,$(E)),D)
ENV		=	Debug
endif

ifeq ($(OS),Windows_NT)
EXESFX	=	.exe
LDLIBS	?=
else
EXESFX	=
LDLIBS	?=	-lm
endif

BASEDIR	=	.

SYSTEM	:=	$(shell uname -s)
MACH	:=	$(shell uname -m)
HOSTNAME:=	$(shell hostname)

SRCDIR	=	$(BASEDIR)/src
OBJDIR	=	$(BASEDIR)/build-$(SYSTEM)-$(MACH)-$(ENV)/obj
DEPDIR	=	$(BASEDIR)/build-$(SYSTEM)-$(MACH)-$(ENV)/dep
BINDIR	=	$(BASEDIR)/build-$(SYSTEM)-$(MACH)-$(ENV)/bin

CFLAGS	?=	-Wall -Wno-missing-braces -I. -O3

EXE		=	$(notdir    ${CURDIR})$(EXESFX)
CFILES	=	$(wildcard  $(SRCDIR)/*.c)
EXEFILES=	$(BINDIR)/$(EXE)
OBJFILES=	$(addprefix $(OBJDIR)/,$(notdir $(CFILES:.c=.o)))
DEPFILES=	$(addprefix $(DEPDIR)/,$(notdir $(CFILES:.c=.d)))
DEPFLAGS=	-MM -MT '$@'
DEPEND.c=	$(CC)  $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH)

$(EXEFILES):	$(OBJFILES) | $(BINDIR)
	$(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@

#c2d:	c2d.c c2d.h
#	gcc -Wall -Wno-missing-braces -I. -O3 -o $@ $< -lm

$(OBJDIR)/%.o:	$(SRCDIR)/%.c | $(OBJDIR) $(DEPDIR)
	$(COMPILE.c) $(OUTPUT_OPTION) $<
	$(DEPEND.c) $< > $(DEPDIR)/$*.d

-include $(DEPFILES)

$(OBJDIR):
	@mkdir	-p	$(OBJDIR)

$(DEPDIR):
	@mkdir	-p	$(DEPDIR)

$(BINDIR):
	@mkdir	-p	$(BINDIR)


.PHONY:	clean
clean:
	-rm	$(EXEFILES) $(OBJFILES) $(DEPFILES)
	-rmdir	$(BINDIR) $(OBJDIR) $(DEPDIR)